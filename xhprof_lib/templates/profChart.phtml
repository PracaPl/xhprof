<script type="text/javascript">
	/**
	 * Format an integer as a time value
	 *
	 * @param {String} time The value to format.
	 *
	 * @return string
	 */
	function printSeconds(time) {
		var prefix = '',
			suffix = 'Î¼s';
		if (time < 0) {
			time = abs(time);
			prefix = '-';
		}
	
		if (time > 1000) {
			time = time / 1000;
			suffix = 'ms';
		}
	
		if (time > 1000) {
			time = time / 1000;
			suffix = ' s';
		}
	
		if (time > 60 && suffix == ' s') {
			time = time / 60;
			suffix = 'min!';
		}
	
		return prefix + Highcharts.numberFormat(time) + ' ' + suffix;
	}
	
	Highcharts.setOptions({
		colors: ['#4572A7', '#AA4643', '#89A54E', '#80699B', '#3D96AE', '#DB843D', '#92A8CD', '#A47D7C', '#B5CA92', '#EAFEBB', '#FEB4B1', '#2B6979', '#E9D6FE', '#FECDA3', '#FED980'],
		credits: {
			enabled: false
		},
		lang: {
			thousandsSep: '<?php echo $_xhprof['thousandsSeparator'] ?>',
			decimalPoint: '<?php echo $_xhprof['decimalSeparator'] ?>'
		}
	});
	var exclusiveWallTimeChart = new Highcharts.Chart({
		chart: {
			renderTo: 'exclusiveWallTimeChart',
			height: '300'
		},
		title: {
			text: 'Expensive Calls by Exclusive Wall Time'
		},
		tooltip: {
			formatter: function() {
				return '<b>' + this.point.name + '</b><br/>' +
					'Wall: ' + printSeconds(this.point.wall.toString()) + '<br/>' +
					'CPU: ' + printSeconds(this.point.cpu.toString()) + '<br/>' +
					'Calls: ' + this.point.calls;
			}
		},
		plotOptions: {
			pie: {
				allowPointSelect: true,
				cursor: 'pointer',
				showInLegend: true,
				dataLabels: {
					enabled: true,
					color: '#777',
					formatter: function() {
						if (this.point.name == 'Loading' || this.point.name == 'Other') {
							return this.point.name + ': ' + Highcharts.numberFormat(this.percentage) + '%';
						}
						return  '<a href="<?php echo $callGraphUrl . $run2['id']; ?>&func=' + this.point.name + '">' + this.point.name + '</a>: ' + Highcharts.numberFormat(this.percentage) + '%';
					}
				}
			}
		},
		legend: {
			enabled: false,
			align: 'left',
			layout: 'vertical',
			verticalAlign: 'middle',
			labelFormatter: function() {
				return this.name + " (" + Highcharts.numberFormat(this.percentage) + "%)";
			}
		},
		series: [
			{
				type: 'pie',
				name: 'Expensive Calls by Exclusive Wall Time',
				data: [
					<?php
							$iterations = 0;
							$other = 0;
							foreach($data_copy as $dataPoint) {
								 if (++$iterations > 18) {
									  $other+= $dataPoint['excl_wt'];
								 } else {
									  echo "{name: '{$dataPoint['fn']}', y: {$dataPoint['excl_wt']}, cpu: {$dataPoint['excl_cpu']}, wall: {$dataPoint['excl_wt']}, calls: {$dataPoint['ct']}},\n";
								 }
							}
							echo "['Other', $other]";
					  ?>
				]
			}
		]
	});
	var exclusiveCpuTimeChart = new Highcharts.Chart({
		chart: {
			renderTo: 'exclusiveCpuTimeChart',
			height: '300'
		},
		title: {
			text: 'Expensive Calls by Exclusive CPU Time'
		},
		tooltip: {
			formatter: function() {
				return '<b>' + this.point.name + '</b><br/>' +
					'Wall: ' + printSeconds(this.point.wall.toString()) + '<br/>' +
					'CPU: ' + printSeconds(this.point.cpu.toString()) + '<br/>' +
					'Calls: ' + this.point.calls;
			}
		},
		plotOptions: {
			pie: {
				allowPointSelect: true,
				cursor: 'pointer',
				showInLegend: true,
				dataLabels: {
					enabled: true,
					color: '#777',
					formatter: function() {
						if (this.point.name == 'Loading' || this.point.name == 'Other') {
							return this.point.name + ': ' + Highcharts.numberFormat(this.percentage) + '%';
						}
						return  '<a href="<?php echo $callGraphUrl . $run2['id']; ?>&func=' + this.point.name + '">' + this.point.name + '</a>: ' + Highcharts.numberFormat(this.percentage) + '%';
					}
				}
			}
		},
		legend: {
			enabled: false,
			align: 'left',
			layout: 'vertical',
			verticalAlign: 'middle',
			labelFormatter: function() {
				return this.name + " (" + Highcharts.numberFormat(this.percentage) + "%)";
			}
		},
		series: [
			{
				type: 'pie',
				name: 'Expensive Calls by Exclusive CPU Time',
				data: [
					<?php
							$iterations = 0;
							$other = 0;
							foreach($data_cpu as $dataPoint) {
								 if (++$iterations > 18) {
									  $other+= $dataPoint['excl_cpu'];
								 } else {
									  echo "{name: '{$dataPoint['fn']}', y: {$dataPoint['excl_cpu']}, cpu: {$dataPoint['excl_cpu']}, wall: {$dataPoint['excl_wt']}, calls: {$dataPoint['ct']}},\n";
								 }
							}
							echo "['Other', $other]";
					  ?>
				]
			}
		]
	});
	var mostCalledMethodsChart = new Highcharts.Chart({
		chart: {
			renderTo: 'mostCalledMethodsChart',
			height: '300'
		},
		title: {
			text: 'Most called methods'
		},
		tooltip: {
			formatter: function() {
				return '<b>' + this.point.name + '</b><br/>' +
					'Wall: ' + printSeconds(this.point.wall.toString()) + '<br/>' +
					'CPU: ' + printSeconds(this.point.cpu.toString()) + '<br/>' +
					'Calls: ' + this.point.calls;
			}
		},
		plotOptions: {
			pie: {
				allowPointSelect: true,
				cursor: 'pointer',
				showInLegend: true,
				dataLabels: {
					enabled: true,
					color: '#777',
					formatter: function() {
						if (this.point.name == 'Loading' || this.point.name == 'Other') {
							return this.point.name + ': ' + Highcharts.numberFormat(this.percentage) + '%';
						}
						return  '<a href="<?php echo $callGraphUrl . $run2['id']; ?>&func=' + this.point.name + '">' + this.point.name + '</a>: ' + Highcharts.numberFormat(this.percentage) + '%';
					}
				}
			}
		},
		legend: {
			enabled: false,
			align: 'left',
			layout: 'vertical',
			verticalAlign: 'middle',
			labelFormatter: function() {
				return this.name + " (" + Highcharts.numberFormat(this.percentage) + "%)";
			}
		},
		series: [
			{
				type: 'pie',
				name: 'Most called methods',
				data: [
					<?php
							$iterations = 0;
							$other = 0;
							foreach($data_calls as $dataPoint)
							{
								 if (++$iterations > 18) {
									  $other+= $dataPoint['ct'];
								 } else {
									  echo "{name: '{$dataPoint['fn']}', y: {$dataPoint['ct']}, cpu: {$dataPoint['excl_cpu']}, wall: {$dataPoint['excl_wt']}, calls: {$dataPoint['ct']}},\n";
								 }
							}
							echo "['Other', $other]";
					  ?>
				]
			}
		]
	});
</script>
